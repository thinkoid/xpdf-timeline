//========================================================================
//
// ltkbuild.cc
//
// Read an LTKbuild file from stdin and write C++ window construction
// function(s) to stdout.
//
// Copyright 1996 Derek B. Noonburg
//
//========================================================================

#define VERSION "0.1"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdarg.h>
#include <stypes.h>
#include <mem.h>
#include <String.h>

enum ArgKind {
  argVal,			// arg with value
  argSel,			// selection arg
  argLastSel			// last in list of selections
};

struct ArgDesc {
  char *tag;			// tag used in ltk file
  ArgKind kind;			// kind of arg
  Boolean required;
  char *val;			// default for argVal; value for argSel
};

struct BlockDesc {
  char *name;			// name used in ltk file
  char *type;			// corresponding C++ type
  ArgDesc *args;		// list of legal args
};

struct Arg {
  char s[256];
};

struct Block {
  char *name;
  char *type;
  Arg *args;
  int numArgs;
};

#include "ltkbuild.widgets.h"

static Boolean readWindow();
static void readBox(int indent);
static void readWidget(int indent);
static Block *readBlock(BlockDesc *tab, char *err);
static void freeBlock(Block *block);
static void initLexer();
static char *getToken();
static Boolean skipSpace();
static Boolean checkToken(char *s, char *msg = NULL);
static void error(char *msg, ...);

static char line[256];
static char *nextChar;
static int lineNum;
static char tokenBuf[256];
static int numErrors;

//------------------------------------------------------------------------

int main(int argc, char *argv[]) {
  initLexer();
  printf("// This file was generated by ltkbuild %s\n\n", VERSION);
  while (readWindow()) ;
  if (numErrors > 0)
    return 1;
  return 0;
}

//------------------------------------------------------------------------

static Boolean readWindow() {
  Block *block;
  int i;

  if (!(block = readBlock(windowTab, "window block")))
    return false;

  printf("%s *%s(LTKApp *app) {\n", block->type, block->args[0].s);
  printf("  return new %s(app, ", block->type);
  for (i = 1; i < block->numArgs; ++i) {
    printf("%s,%c", block->args[i].s,
	   i < block->numArgs - 1 ? ' ' : '\n');
  }
  freeBlock(block);

  checkToken("{");
  readBox(4);
  checkToken("}");
  printf("\n");

  printf("  );\n");
  printf("}\n\n");

  return true;
}

static void readBox(int indent) {
  Block *block;
  int x, y;
  int i, j;

  if (!(block = readBlock(boxTab, "box block")))
    return;
  x = atoi(block->args[boxArgX].s);
  y = atoi(block->args[boxArgY].s);

  printf("%*snew %s(", indent, "", block->type);
  for (i = 0; i < block->numArgs; ++i) {
    printf("%s,%c", block->args[i].s,
	   i < block->numArgs - 1 ? ' ' : '\n');
  }
  freeBlock(block);

  checkToken("{");
  for (i = 0; i < x; ++i) {
    for (j = 0; j < y; ++j) {
      readWidget(indent + 2);
      if (i == x-1 && j == y-1)
	printf("\n");
      else
	printf(",\n");
    }
  }
  checkToken("}", "wrong box size?");
  printf("%*s)", indent, "");
}

static void readWidget(int indent) {
  Block *block;
  int x, y;
  int i, j;

  if (!(block = readBlock(widgetTab, "widget block")))
    return;

  printf("%*snew %s(", indent, "", block->type);
  for (i = 0; i < block->numArgs; ++i) {
    printf("%s%s", block->args[i].s,
	   i < block->numArgs - 1 ? ", " : "");
  }

  if (!strcmp(block->type, "LTKBox")) {
    x = atoi(block->args[boxArgX].s);
    y = atoi(block->args[boxArgY].s);
    printf(",\n");
    checkToken("{");
    for (i = 0; i < x; ++i) {
      for (j = 0; j < y; ++j) {
	readWidget(indent + 2);
	if (i == x-1 && j == y-1)
	  printf("\n");
	else
	  printf(",\n");
      }
    }
    checkToken("}", "wrong box size?");
    printf("%*s)", indent, "");
  } else {
    printf(")");
  }
  freeBlock(block);
}

static Block *readBlock(BlockDesc *tab, char *err) {
  Block *block;
  char *name, *tag, *val;
  BlockDesc *bd;
  ArgDesc *ad;
  int n;
  Boolean isVal;

  // get name and find block descriptor
  if (!(name = getToken()))
    return NULL;
  for (bd = tab; bd->name; ++bd) {
    if (!strcmp(name, bd->name))
      break;
  }
  if (!bd->name) {
    error("Expected %s, got '%s'", err, name);
    return NULL;
  }

  // skip paren
  checkToken("(");

  // allocate block
  block = (Block *)smalloc(sizeof(Block));
  block->name = bd->name;
  block->type = bd->type;

  // count args and allocate array
  block->numArgs = 0;
  for (ad = bd->args; ad->tag; ++ad) {
    if (ad->kind == argVal || ad->kind == argLastSel)
      ++block->numArgs;
  }
  block->args = (Arg *)smalloc(block->numArgs * sizeof(Arg));

  // initialize args to defaults
  n = 0;
  isVal = true;
  for (ad = bd->args; ad->tag; ++ad) {
    if (ad->kind == argVal) {
      strcpy(block->args[n++].s, ad->val);
      isVal = true;
    } else if (isVal && ad->kind == argSel) {
      strcpy(block->args[n++].s, ad->val);
      isVal = false;
    } else if (ad->kind == argLastSel) {
      isVal = true;
    }
  }

  // read args
  while (1) {
    if (!(tag = getToken()))
      break;
    if (!strcmp(tag, ")"))
      break;
    n = strlen(tag);
    if (tag[n-1] == ':') {
      tag[n-1] = '\0';
      isVal = true;
    } else {
      isVal = false;
    }
    n = 0;
    for (ad = bd->args; ad->tag; ++ad) {
      if (!strcmp(ad->tag, tag))
	break;
      if (ad->kind == argVal || ad->kind == argLastSel)
	++n;
    }
    if (ad->tag) {
      if (isVal) {
	val = getToken();
	if (ad->kind != argVal)
	  error("Tag '%s' in '%s' block is not a value tag", tag, block->name);
      } else {
	val = ad->val;
	if (ad->kind == argVal)
	  error("Tag '%s' in '%s' block is a value tag", tag, block->name);
      }
      strcpy(block->args[n].s, val);
    } else {
      error("Unknown tag '%s' in '%s' block", tag, block->name);
      if (isVal)
	getToken();
    }
  }
  if (!tag)
    error("Unclosed '%s' block", block->name);

  return block;
}

static void freeBlock(Block *block) {
  sfree(block->args);
  sfree(block);
}

//------------------------------------------------------------------------

static void initLexer() {
  line[0] = '\0';
  nextChar = line;
  lineNum = 0;
  numErrors = 0;
}

static char *getToken() {
  char *p;
  int numBrackets;

  if (!skipSpace())
    return NULL;

  p = tokenBuf;

  if (*nextChar == '(' || *nextChar == ')' ||
      *nextChar == '{' || *nextChar == '}') {
    *p++ = *nextChar++;
    *p = '\0';

  } else if (*nextChar == '"') {
    *p++ = *nextChar;
    do {
      ++nextChar;
      if (!*nextChar)
	break;
      *p++ = *nextChar;
    } while (!(*nextChar == '"' && nextChar[-1] != '\\'));
    *p = '\0';
    if (*nextChar == '"')
      ++nextChar;
    else
      error("Unclosed quoted string");

  } else if (*nextChar == '[') {
    numBrackets = 1;
    while (1) {
      ++nextChar;
      if (!*nextChar)
	break;
      if (*nextChar == '[' && nextChar[-1] != '\\')
	++numBrackets;
      else if (*nextChar == ']' && nextChar[-1] != '\\')
	--numBrackets;
      if (numBrackets == 0)
	break;
      *p++ = *nextChar;
    }
    *p = '\0';
    if (*nextChar == ']')
      ++nextChar;
    else
      error("Unclosed bracketed expression");

  } else {
    while (!isspace(*nextChar) &&
	   *nextChar != '(' && *nextChar != ')' &&
	   *nextChar != '{' && *nextChar != '}' &&
	   *nextChar != ':' && *nextChar)
      *p++ = *nextChar++;
    if (*nextChar == ':')
      *p++ = *nextChar++;
    *p = '\0';
  }

  return tokenBuf;
}

static Boolean skipSpace() {
  while (1) {
    if (!*nextChar || *nextChar == '#') {
      if (!fgets(line, sizeof(line), stdin)) {
	line[0] = '\0';
	nextChar = line;
	return false;
      }
      ++lineNum;
      nextChar = line;
    } else if (isspace(*nextChar)) {
      ++nextChar;
    } else {
      break;
    }
  }
  return true;
}

static Boolean checkToken(char *s, char *msg) {
  char *tok;

  tok = getToken();
  if (tok && !strcmp(tok, s))
    return true;
  if (msg)
    error("Expected '%s', got '%s' (%s)", s, tok, msg);
  else
    error("Expected '%s', got '%s'", s, tok);
  return false;
}

static void error(char *msg, ...) {
  va_list args;

  fprintf(stderr, "Error at line %d: ", lineNum);
  va_start(args, msg);
  vfprintf(stderr, msg, args);
  va_end(args);
  fprintf(stderr, "\n");
  ++numErrors;
}
